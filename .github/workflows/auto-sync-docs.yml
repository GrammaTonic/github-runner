name: Auto Sync Docs

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

# Ensure the token used by steps has the rights to create branches/PRs when available.
permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-sync-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Need full history for diff against origin/main
          fetch-depth: 0
      - name: Check for outdated references in docs and wiki
        run: |
          # Search for the word 'template' but ignore known benign occurrences:
          # - files under docs/archive/ (historical notes)
          # - Prometheus console flag lines which include 'templates' as part of the flag
            if grep -rnI --line-number -E '\.template\b' docs/ wiki-content/ | grep -v -E '^docs/archive/|--web.console.templates=' > /tmp/outdated_refs.txt; then
            echo "❌ Outdated references found:"
            cat /tmp/outdated_refs.txt
            # Fail the job when running in CI
            exit 1
          else
            echo "✅ No outdated references found."
          fi
      - name: Validate Markdown links in docs and wiki
        run: |
          set -euo pipefail
          echo "Collecting markdown files (excluding docs/archive/)..."
          # Docs: count and run link-check if any (exclude archived docs)
          DOCS_COUNT=$(find docs -type f -name '*.md' ! -path 'docs/archive/*' 2>/dev/null | wc -l | tr -d ' ' || true)
          if [ -n "$DOCS_COUNT" ] && [ "$DOCS_COUNT" -gt 0 ]; then
            echo "Running markdown-link-check on $DOCS_COUNT docs files..."
            find docs -type f -name '*.md' ! -path 'docs/archive/*' -print0 | xargs -0 npx -y markdown-link-check || true
          else
            echo "No docs markdown files found to check."
          fi

          # Wiki: only run if directory exists and files found
          if [ -d wiki-content ]; then
            WIKI_COUNT=$(find wiki-content -type f -name '*.md' 2>/dev/null | wc -l | tr -d ' ' || true)
            if [ -n "$WIKI_COUNT" ] && [ "$WIKI_COUNT" -gt 0 ]; then
              echo "Running markdown-link-check on $WIKI_COUNT wiki files..."
              find wiki-content -type f -name '*.md' -print0 | xargs -0 npx -y markdown-link-check || true
            else
              echo "No wiki markdown files found to check."
            fi
          else
            echo "No wiki-content directory present, skipping wiki link-check."
          fi
      - name: Generate Documentation and Wiki Patch
        id: gen-patch
        run: |
          # Produce a unified diff of docs and wiki content against origin/main
          set -euo pipefail
          git fetch origin main --depth=1 || true
          git diff origin/main -- docs/ wiki-content/ > docs-wiki-full-patch.diff || true
          # Expose whether the patch file contains changes so downstream steps can skip when nothing changed
          if [ -s docs-wiki-full-patch.diff ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Upload Docs and Wiki Patch Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs-wiki-full-patch
          path: docs-wiki-full-patch.diff
      - name: Open issue with docs/wiki patch
        if: steps.gen-patch.outputs.changed == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const patchPath = 'docs-wiki-full-patch.diff';
            let body = 'An automated scan detected documentation or wiki changes. The patch is attached below as a diff.\n\n';
            if (fs.existsSync(patchPath)) {
              const diff = fs.readFileSync(patchPath, 'utf8');
              // Limit issue body size; include first 200KB and reference the artifact for full patch
              const MAX = 200000; // ~200KB
              if (diff.length > MAX) {
                body += 'Patch is large; showing first 200KB. Full patch is uploaded as an artifact.\n\n';
                body += '```\n' + diff.slice(0, MAX) + '\n```';
              } else {
                body += '```\n' + diff + '\n```';
              }
            } else {
              body += 'No patch file found in the workspace.';
            }

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Automated docs/wiki sync - run ${context.runId}`,
              body: body
            });
