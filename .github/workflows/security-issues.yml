name: Security Issue Management

on:
  schedule:
    # Run weekly security scans and issue creation
    - cron: "0 2 * * 1" # Every Monday at 2 AM UTC
  workflow_dispatch:
    inputs:
      min_severity:
        description: "Minimum severity to process (CRITICAL, HIGH, MEDIUM, LOW)"
        required: false
        default: "MEDIUM"
        type: choice
        options:
          - CRITICAL
          - HIGH
          - MEDIUM
          - LOW
      dry_run:
        description: "Dry run (do not create issues, just show what would be created)"
        required: false
        default: false
        type: boolean
      scan_targets:
        description: "Scan targets (comma-separated: filesystem,container,chrome)"
        required: false
        default: "filesystem,container,chrome"
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan-and-issues:
    name: Security Scan & Issue Creation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      issues: write
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up scan parameters
        id: params
        run: |
          # Set defaults for scheduled runs
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "min_severity=MEDIUM" >> $GITHUB_OUTPUT
            echo "dry_run=false" >> $GITHUB_OUTPUT
            echo "scan_targets=filesystem,container,chrome" >> $GITHUB_OUTPUT
          else
            echo "min_severity=${{ github.event.inputs.min_severity || 'MEDIUM' }}" >> $GITHUB_OUTPUT
            echo "dry_run=${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_OUTPUT
            echo "scan_targets=${{ github.event.inputs.scan_targets || 'filesystem,container,chrome' }}" >> $GITHUB_OUTPUT
          fi

      - name: Create results directory
        run: mkdir -p trivy-results

      - name: Filesystem Security Scan
        if: contains(steps.params.outputs.scan_targets, 'filesystem')
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "json"
          output: "trivy-results/trivy-results.json"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"

      - name: Log in to Container Registry
        if: contains(steps.params.outputs.scan_targets, 'container') || contains(steps.params.outputs.scan_targets, 'chrome')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build standard runner image for scanning
        if: contains(steps.params.outputs.scan_targets, 'container')
        run: |
          # Build from docker directory to get correct context
          cd docker && docker build -t temp-runner:scan -f Dockerfile .

      - name: Container Security Scan - Standard Runner
        if: contains(steps.params.outputs.scan_targets, 'container')
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "image"
          image-ref: "temp-runner:scan"
          format: "json"
          output: "trivy-results/trivy-container-results.json"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"

      - name: Build Chrome runner image for scanning
        if: contains(steps.params.outputs.scan_targets, 'chrome')
        run: |
          # Build from docker directory to get correct context
          cd docker && docker build -t temp-chrome-runner:scan -f Dockerfile.chrome .

      - name: Container Security Scan - Chrome Runner
        if: contains(steps.params.outputs.scan_targets, 'chrome')
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "image"
          image-ref: "temp-chrome-runner:scan"
          format: "json"
          output: "trivy-results/trivy-chrome-results.json"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"

      - name: List scan results
        run: |
          echo "=== Trivy Scan Results ==="
          ls -la trivy-results/
          echo ""
          for file in trivy-results/*.json; do
            if [[ -f "$file" ]]; then
              echo "=== $(basename "$file") ==="
              jq -r '[.Results[]?.Vulnerabilities[]?] | length' "$file" 2>/dev/null || echo "0"
              echo "vulnerabilities found"
              echo ""
            fi
          done

      - name: Create security issues from Trivy results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MIN_SEVERITY: ${{ steps.params.outputs.min_severity }}
          DRY_RUN: ${{ steps.params.outputs.dry_run }}
          TRIVY_RESULTS_DIR: trivy-results
        run: |
          # Install required tools if not available
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Run the security issue creation script
          ./scripts/create-security-issues.sh

      - name: Upload Trivy results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan-results-${{ github.run_number }}
          path: trivy-results/
          retention-days: 30

      - name: Generate security summary
        if: always()
        run: |
          echo "## ðŸ”’ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Minimum Severity:** ${{ steps.params.outputs.min_severity }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ steps.params.outputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Targets:** ${{ steps.params.outputs.scan_targets }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Vulnerability Counts by Target" >> $GITHUB_STEP_SUMMARY
          echo "| Target | Vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-----------------|" >> $GITHUB_STEP_SUMMARY

          for file in trivy-results/*.json; do
            if [[ -f "$file" ]]; then
              target=$(basename "$file" .json | sed 's/trivy-//' | sed 's/-results//' | sed 's/^$/filesystem/')
              count=$(jq -r '[.Results[]?.Vulnerabilities[]?] | length' "$file" 2>/dev/null || echo "0")
              echo "| $target | $count |" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review created security issues in the [Issues tab](https://github.com/${{ github.repository }}/issues?q=is%3Aissue+is%3Aopen+label%3Asecurity)" >> $GITHUB_STEP_SUMMARY
          echo "- Prioritize fixes based on severity and impact" >> $GITHUB_STEP_SUMMARY
          echo "- Update base images and dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor for new vulnerabilities" >> $GITHUB_STEP_SUMMARY

  cleanup-old-artifacts:
    name: Cleanup Old Security Artifacts
    runs-on: ubuntu-latest
    needs: security-scan-and-issues
    if: always()

    steps:
      - name: Delete old security scan artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            // Keep only the 5 most recent security scan artifacts
            const securityArtifacts = artifacts.data.artifacts
              .filter(artifact => artifact.name.includes('trivy-security-scan-results'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(5); // Keep 5, delete the rest

            for (const artifact of securityArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted old artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`Could not delete artifact ${artifact.name}: ${error.message}`);
              }
            }
