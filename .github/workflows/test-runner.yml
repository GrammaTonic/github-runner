# Test GitHub Actions Runner

name: Test Self-Hosted Runner

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test-runner:
    runs-on: self-hosted
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: System Information
        run: |
          echo "=== System Information ==="
          uname -a
          echo ""
          echo "=== CPU Information ==="
          lscpu | head -20
          echo ""
          echo "=== Memory Information ==="
          free -h
          echo ""
          echo "=== Disk Space ==="
          df -h
          echo ""
          echo "=== Docker Version ==="
          docker --version
          echo ""
          echo "=== Docker Compose Version ==="
          docker compose version

      - name: Test Docker Functionality
        run: |
          echo "=== Testing Docker ==="
          docker run --rm hello-world
          echo ""
          echo "=== Docker System Info ==="
          docker system info --format "{{.ServerVersion}}"

      - name: Test Build Environment
        run: |
          echo "=== Testing Build Tools ==="
          which git && git --version
          which curl && curl --version | head -1
          which wget && wget --version | head -1
          echo ""
          echo "=== Python Environment ==="
          python3 --version
          pip3 --version
          echo ""
          echo "=== Node.js Environment ==="
          node --version
          npm --version

      - name: Test Network Connectivity
        run: |
          echo "=== Testing Network ==="
          ping -c 3 google.com
          curl -s https://api.github.com/zen

      - name: Test File System Permissions
        run: |
          echo "=== Testing File System ==="
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Permissions: $(ls -la)"

          # Test write permissions
          echo "test" > test-file.txt
          cat test-file.txt
          rm test-file.txt
          echo "File system test passed"

      - name: Test Environment Variables
        run: |
          echo "=== Environment Variables ==="
          echo "RUNNER_NAME: $RUNNER_NAME"
          echo "RUNNER_OS: $RUNNER_OS"
          echo "RUNNER_ARCH: $RUNNER_ARCH"
          echo "GITHUB_ACTIONS: $GITHUB_ACTIONS"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"

      - name: Performance Test
        run: |
          echo "=== Performance Test ==="
          # CPU stress test
          echo "CPU cores: $(nproc)"
          time python3 -c "
          import time
          start = time.time()
          # Simple CPU intensive task
          result = sum(i*i for i in range(1000000))
          end = time.time()
          print(f'CPU test completed in {end-start:.2f} seconds')
          print(f'Result: {result}')
          "

          # Memory test
          echo "Available memory: $(free -h | grep 'Mem:' | awk '{print $2}')"
          python3 -c "
          import sys
          print(f'Python memory usage: {sys.getsizeof([0]*100000)} bytes for 100k integers')
          "

  test-parallel:
    runs-on: self-hosted
    timeout-minutes: 5
    strategy:
      matrix:
        test: [1, 2, 3]

    steps:
      - name: Parallel Test ${{ matrix.test }}
        run: |
          echo "=== Parallel Test ${{ matrix.test }} ==="
          echo "Runner: $RUNNER_NAME"
          echo "Start time: $(date)"

          # Simulate some work
          sleep 10

          echo "End time: $(date)"
          echo "Test ${{ matrix.test }} completed successfully"

  test-docker-build:
    runs-on: self-hosted
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Docker Build
        run: |
          echo "=== Testing Docker Build Capability ==="

          # Create a simple test Dockerfile
          cat > Dockerfile.test << 'EOF'
          FROM alpine:latest
          RUN apk add --no-cache curl
          COPY . /app
          WORKDIR /app
          CMD ["echo", "Docker build test successful"]
          EOF

          # Build test image
          docker build -f Dockerfile.test -t test-runner-build .

          # Run test container
          docker run --rm test-runner-build

          # Clean up
          docker rmi test-runner-build
          rm Dockerfile.test

          echo "Docker build test completed successfully"

  test-artifacts:
    runs-on: self-hosted
    timeout-minutes: 5

    steps:
      - name: Create Test Artifacts
        run: |
          mkdir -p test-artifacts

          # Create test files
          echo "Test artifact 1" > test-artifacts/test1.txt
          echo "Test artifact 2" > test-artifacts/test2.txt

          # Create a log file
          echo "$(date): Test log entry" > test-artifacts/test.log

          # Create JSON output
          echo '{"test": "successful", "timestamp": "'$(date -Iseconds)'"}' > test-artifacts/result.json

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ github.run_id }}
          path: test-artifacts/
          retention-days: 1

      - name: Verify Artifacts Created
        run: |
          echo "=== Artifact Verification ==="
          ls -la test-artifacts/
          echo ""
          echo "Contents:"
          for file in test-artifacts/*; do
            echo "=== $file ==="
            cat "$file"
            echo ""
          done

  security-test:
    runs-on: self-hosted
    timeout-minutes: 10

    steps:
      - name: Security Checks
        run: |
          echo "=== Security Test ==="

          # Check if running as root (should not be)
          if [ "$(id -u)" -eq 0 ]; then
            echo "ERROR: Running as root user"
            exit 1
          else
            echo "✓ Not running as root: $(whoami)"
          fi

          # Check basic security tools
          echo "=== Available Security Tools ==="
          which git && echo "✓ git available"
          which gpg && echo "✓ gpg available" || echo "✗ gpg not available"
          which ssh && echo "✓ ssh available" || echo "✗ ssh not available"

          # Check file permissions in workspace
          echo "=== Workspace Permissions ==="
          ls -la $GITHUB_WORKSPACE

          # Test isolation
          echo "=== Testing Process Isolation ==="
          ps aux | head -10

          echo "Security checks completed"

  cleanup-test:
    runs-on: self-hosted
    needs:
      [
        test-runner,
        test-parallel,
        test-docker-build,
        test-artifacts,
        security-test,
      ]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Cleanup Test Resources
        run: |
          echo "=== Cleanup Test ==="

          # Clean up any test containers
          docker container prune -f || true

          # Clean up test images
          docker images | grep test | awk '{print $3}' | xargs -r docker rmi || true

          # Show final system state
          echo "=== Final System State ==="
          echo "Disk usage:"
          df -h
          echo ""
          echo "Memory usage:"
          free -h
          echo ""
          echo "Docker system:"
          docker system df

          echo "Cleanup completed"
