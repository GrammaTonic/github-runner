# Chrome-Go Runner Environment Configuration
# Copy this file to chrome-go-runner.env and customize for your environment
# This configuration is for the Chrome-Go runner which includes both Chrome browser
# and Go programming language support for comprehensive testing and development

# ==========================================
# REQUIRED: GitHub Configuration
# ==========================================

# Your GitHub Personal Access Token
# Create one at: https://github.com/settings/tokens
# Required scopes: repo (for private repos) or public_repo (for public repos)
GITHUB_TOKEN=ghp_your_personal_access_token_here

# Your GitHub repository in format: username/repository-name
# Example: GITHUB_REPOSITORY=johndoe/my-awesome-project
GITHUB_REPOSITORY=your-username/your-repo-name

# ==========================================
# CHROME-GO RUNNER: Specialized Configuration
# ==========================================

# Chrome-Go Runner Specific Configuration
RUNNER_NAME=chrome-go-runner-1
RUNNER_LABELS=chrome,go,ui-tests,selenium,playwright,cypress,headless,browser-testing,go-testing,golang
RUNNER_GROUP=chrome-go-runners
RUNNER_WORK_DIR=/home/runner/workspace

# ==========================================
# CHROME BROWSER CONFIGURATION
# ==========================================

# Virtual Display for headless Chrome
DISPLAY=:99

# Chrome flags for headless operation
CHROME_FLAGS=--headless --no-sandbox --disable-dev-shm-usage --disable-gpu --remote-debugging-port=9222

# Playwright Configuration
PLAYWRIGHT_BROWSERS_PATH=/home/runner/.cache/ms-playwright
PLAYWRIGHT_CHROMIUM_EXECUTABLE_PATH=/usr/bin/google-chrome-stable

# Screen resolution for virtual display
SCREEN_WIDTH=1920
SCREEN_HEIGHT=1080
SCREEN_DEPTH=24

# ==========================================
# GO PROGRAMMING LANGUAGE CONFIGURATION
# ==========================================

# Go Environment Variables
GO_VERSION=1.23.1
GOPATH=/home/runner/go
GOROOT=/usr/local/go
GO111MODULE=on
GOPROXY=https://proxy.golang.org,direct
GOSUMDB=sum.golang.org
CGO_ENABLED=1

# Go Build and Test Configuration
GO_BUILD_FLAGS=-v
GO_TEST_FLAGS=-v -race -cover
GO_TEST_TIMEOUT=10m

# Go Module Cache
GOMODCACHE=/home/runner/go/pkg/mod

# ==========================================
# PERFORMANCE AND RESOURCE CONFIGURATION
# ==========================================

# Memory limits
CHROME_MAX_MEMORY=2048
NODE_MAX_MEMORY=4096
GO_MAX_MEMORY=2048

# Node.js Configuration
NODE_OPTIONS=--max-old-space-size=4096
PYTHON_UNBUFFERED=1

# Runner Scaling (for multiple instances)
RUNNER_INSTANCE=1

# ==========================================
# TESTING AND CI/CD CONFIGURATION
# ==========================================

# Timeout settings for tests
BROWSER_TIMEOUT=30000
SELENIUM_TIMEOUT=30000
PLAYWRIGHT_TIMEOUT=30000
CYPRESS_TIMEOUT=30000
GO_TEST_TIMEOUT=30000

# Docker Registry Configuration
DOCKER_REGISTRY=ghcr.io
DOCKER_NAMESPACE=grammatonic

# Chrome-Go Image Configuration
CHROME_GO_IMAGE_TAG=chrome-go-latest

# ==========================================
# OPTIONAL: Advanced Configuration
# ==========================================

# Ephemeral Runners (auto-remove after each job)
# Set to true for enhanced security, false for persistent runners
RUNNER_EPHEMERAL=false

# Replace existing runner with same name
RUNNER_REPLACE_EXISTING=true

# Working Directory inside container
RUNNER_WORKDIR=/home/runner/_work

# ==========================================
# EXAMPLES AND COMMON CONFIGURATIONS
# ==========================================

# Example 1: Full-Stack Development and Testing
# GITHUB_TOKEN=ghp_abc123...
# GITHUB_REPOSITORY=myorg/fullstack-app
# RUNNER_NAME=fullstack-runner
# RUNNER_LABELS=chrome,go,ui-tests,api-tests,integration
# GO_VERSION=1.23.1
# CHROME_FLAGS=--headless --no-sandbox --window-size=1920,1080

# Example 2: Go Backend with UI Testing
# GITHUB_REPOSITORY=myorg/go-backend
# RUNNER_NAME=go-ui-runner
# RUNNER_LABELS=docker,chrome,go,backend,ui-tests,golang
# GO_BUILD_FLAGS=-v -ldflags="-s -w"
# GO_TEST_FLAGS=-v -race -coverprofile=coverage.out

# Example 3: Microservices with E2E Testing
# GITHUB_REPOSITORY=myorg/microservices
# RUNNER_NAME=e2e-runner
# RUNNER_LABELS=chrome,go,e2e,integration,selenium,playwright
# PLAYWRIGHT_TIMEOUT=60000
# GO_TEST_TIMEOUT=60000

# Example 4: High-Security Ephemeral Setup
# RUNNER_EPHEMERAL=true
# RUNNER_REPLACE_EXISTING=true
# RUNNER_LABELS=docker,chrome,go,ephemeral,secure
# GO111MODULE=on
# CGO_ENABLED=0

# ==========================================
# TROUBLESHOOTING NOTES
# ==========================================

# If Chrome tests fail:
# - Check CHROME_FLAGS for compatibility
# - Verify DISPLAY=:99 is available
# - Ensure sufficient memory (CHROME_MAX_MEMORY)

# If Go builds fail:
# - Check GO_VERSION matches your project requirements
# - Verify GOPROXY settings for module downloads
# - Ensure GOMODCACHE has write permissions

# For performance issues:
# - Adjust memory limits based on available resources
# - Consider using RUNNER_EPHEMERAL=true for cleaner runs
# - Monitor resource usage with docker stats