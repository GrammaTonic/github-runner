
FROM ubuntu:22.04
# --- ARCHITECTURE ENFORCEMENT ---
# This image is ONLY supported on linux/amd64 (x86_64) due to Chrome/ChromeDriver binary compatibility.
# If you attempt to build on ARM (Apple Silicon, etc.), the build will fail.
ARG TARGETARCH
RUN if [ "$TARGETARCH" != "amd64" ]; then echo "ERROR: Chrome runner image only supports linux/amd64 (x86_64)." && exit 1; fi

# Metadata
LABEL maintainer="GrammaTonic"
LABEL description="GitHub Actions Self-Hosted Runner optimized for Chrome and web UI testing"
LABEL version="1.0.4"

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    unzip=6.0-26ubuntu3.2 \
    tar \
    ca-certificates \
    gnupg \
    lsb-release=11.1.0ubuntu4 \
    sudo \
    build-essential=12.9ubuntu3 \
    git \
    jq=1.6-2.1ubuntu3.1 \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y --no-install-recommends \
    libnss3-dev \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libxrandr2 \
    libxss1 \
    libasound2-dev \
    libatspi2.0-0 \
    libgtk-3-0 \
    libpangocairo-1.0-0 \
    libcairo-gobject2 \
    libgdk-pixbuf2.0-0 \
    fonts-liberation \
    fonts-noto-color-emoji \
    fonts-noto-cjk \
    && rm -rf /var/lib/apt/lists/*

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
# Install Google Chrome (architecture-aware)
RUN apt-get update && apt-get install -y --no-install-recommends \
    libglib2.0-0 \
    libnss3 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxtst6 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libdrm2 \
    libgbm1 \
    libpangocairo-1.0-0 \
    libcairo2 \
    libgdk-pixbuf2.0-0 \
    libgtk-3-0 \
    fonts-liberation \
    fonts-noto-color-emoji \
    fonts-noto-cjk \
    xvfb \
    procps \
    wget \
    ca-certificates \
    && CHROME_VERSION="124.0.6367.207" \
    && curl -L -o /tmp/chrome-linux64.zip "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/${CHROME_VERSION}/linux64/chrome-linux64.zip" \
    && unzip /tmp/chrome-linux64.zip -d /opt/ \
    && ln -sf /opt/chrome-linux64/chrome /usr/bin/google-chrome \
    && ln -sf /opt/chrome-linux64/chrome /usr/bin/chromium-browser \
    && rm -rf /tmp/chrome-linux64.zip /var/lib/apt/lists/*

# Install ChromeDriver using dedicated script
COPY --chown=runner:runner install-chromedriver.sh /tmp/install-chromedriver.sh
RUN chmod +x /tmp/install-chromedriver.sh \
    && /tmp/install-chromedriver.sh \
    && rm /tmp/install-chromedriver.sh

# Install Node.js (for npm-based testing tools)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y --no-install-recommends nodejs=20.13.1-1nodesource1 \
    && rm -rf /var/lib/apt/lists/*

# Install Python (for Selenium testing)
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    python3-pip \
    python3-venv \
    python3-setuptools \
    python3-wheel \
    && rm -rf /var/lib/apt/lists/*

# Pin npm package versions
RUN npm install -g playwright@1.55.0 cypress@15.1.0 @playwright/test@1.55.0 npm@10.5.0 flat@5.0.2 sha.js@2.4.12 ws@8.17.1 --force \
    && npx playwright install chromium \
    && echo "Applying comprehensive security fixes for known vulnerabilities..." \
    && echo "Cleaning npm cache and temporary files..." \
    && npm cache clean --force \
    && rm -rf /tmp/* /var/tmp/* /root/.npm /home/*/.npm 2>/dev/null || true

# Pin Python package versions
RUN pip3 install --upgrade pip==24.0 setuptools==68.2.2 wheel==0.42.0 --no-cache-dir \
    && pip3 install selenium==4.15.2 pytest pytest-selenium webdriver-manager==4.0.1 --no-cache-dir

# Create runner user
RUN useradd -m -s /bin/bash runner \
    && usermod -aG sudo runner \
    && echo "runner ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Final cleanup to minimize image size (before switching to runner user)
RUN echo "Final cleanup to minimize image size..." \
    && apt-get autoremove -y \
    && apt-get autoclean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* /var/tmp/* \
    && rm -rf /var/log/* \
    && rm -rf /root/.cache \
    && find /usr/share/doc -type f -delete 2>/dev/null || true \
    && find /usr/share/man -type f -delete 2>/dev/null || true

# Download and install GitHub Actions runner
ARG RUNNER_VERSION="2.328.0"
ARG TARGETPLATFORM

WORKDIR /actions-runner


# Download the GitHub Actions runner for x64 only
RUN curl -o "actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz" \
    -L "https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz" \
    && tar xzf "actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz" \
    && rm "actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz" \
    && chown -R runner:runner /actions-runner

# Create necessary directories
RUN mkdir -p /home/runner/.cache \
    && mkdir -p /home/runner/workspace \
    && chown -R runner:runner /home/runner

# Chrome configuration for headless mode
ENV CHROME_BIN=/usr/bin/google-chrome-stable
ENV DISPLAY=:99

# Copy entrypoint script
COPY --chown=runner:runner entrypoint-chrome.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
# For extra security, recommend running container with read-only root filesystem and tmpfs for /tmp in compose/k8s.

# Set up working directory and user
WORKDIR /actions-runner
USER runner

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD pgrep -f "Runner.Listener" > /dev/null || exit 1

ENTRYPOINT ["/entrypoint.sh"]
