# Dockerfile for Chrome Runner (ubuntu:questing)
#
# This image uses ubuntu:questing (25.10 pre-release) for latest browser dependencies.
# CVE mitigation is performed via npm overrides and local installs for all app-level dependencies.
# CVEs in npm's internal modules are documented and monitored; see README.md and DEPLOYMENT.md.
# Example: Trivy scan results are saved to test-results/docker/ for audit.
# For production, use ubuntu:24.04 and rerun all security scans.
# Use a specific version for reproducible builds
FROM ubuntu:questing

# --- METADATA AND ARGUMENTS ---
LABEL maintainer="GrammaTonic"
LABEL description="Optimized GitHub Actions Self-Hosted Runner for Chrome, Go, and web UI testing"
LABEL version="2.0.9"

# Define arguments at the top for easy management
ARG TARGETARCH
ARG RUNNER_VERSION="2.328.0"
ARG CHROME_VERSION="140.0.7339.80"
ARG NODE_VERSION="24.7.0"

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV DEBCONF_NOWARNINGS=yes
ENV CHROME_BIN=/usr/bin/google-chrome
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV DISPLAY=:99
ENV PATH="/home/runner/.npm/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/sbin:/bin:/opt/chrome-linux64:/actions-runner:/usr/local/go/bin"
ENV NODE_PATH="/home/runner/.npm/lib/node_modules"
ENV PLAYWRIGHT_BROWSERS_PATH="/home/runner/.cache/ms-playwright"

# Set SHELL to handle pipe errors correctly
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# --- ARCHITECTURE CHECK ---
RUN if [ "$TARGETARCH" != "amd64" ]; then \
      echo "ERROR: Chrome runner image only supports linux/amd64 (x86_64)." && exit 1; \
    fi

# --- SETUP APT FOR DOCKER IMAGES AND UP DATE UBUNTU ---
RUN echo 'APT::Install-Suggests "0";' >> /etc/apt/apt.conf.d/00-docker \
    && echo 'APT::Install-Recommends "0";' >> /etc/apt/apt.conf.d/00-docker \
    && apt-get update && apt-get upgrade -y \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# --- INSTALL SYSTEM, NODE.JS, PYTHON, CHROME AND DRIVERS ---
# hadolint ignore=DL3008,DL3015
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
    # Essential tools
    curl ca-certificates gnupg wget unzip xz-utils \
    # System utilities
    sudo \
    lsb-release \
    git \
    jq \
    libicu-dev \
    # Chrome & UI testing dependencies (existing)
    libnss3 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxtst6 libatk1.0-0 libatk-bridge2.0-0 libdrm2 libgbm1 libasound2-dev libatspi2.0-0 libgtk-3-0 libpangocairo-1.0-0 libcairo2 libgdk-pixbuf2.0-0 fonts-liberation fonts-noto-color-emoji fonts-noto-cjk xvfb procps \
    # Python
    python3 python3-pip python3-venv \
    # Playwright/Chromium/Chrome required libraries (Ubuntu 24.04 compatible)
    libgstreamer1.0-0 libgstreamer-plugins-base1.0-0 libgstreamer-plugins-good1.0-0 libgstreamer-plugins-bad1.0-0 gstreamer1.0-plugins-ugly libgtk-4-1 libgraphene-1.0-0 libatomic1 libxslt1.1 libwoff1 libvpx9 libevent-2.1-7 libopus0 libwebpdemux2 libavif16 libharfbuzz-icu0 libwebpmux3 libenchant-2-2 libsecret-1-0 libhyphen0 libmanette-0.2-0 libgles2 libx264-164 flite \
    # Clean up APT cache, downloaded archives, and temporary files
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/log/* \
    # hadolint ignore=SC2015
    && find /usr/share/doc -type f -delete 2>/dev/null || true \
    && find /usr/share/man -type f -delete 2>/dev/null || true

# --- INSTALL CHROME AND CHROMEDRIVER ---
RUN CHROME_URL="https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION}/linux64/chrome-linux64.zip" \
    && curl -fSL -o /tmp/chrome.zip "$CHROME_URL" \
    && unzip -o /tmp/chrome.zip -d /opt/ \
    && ln -sf /opt/chrome-linux64/chrome /usr/bin/google-chrome \
    && rm -rf /tmp/chrome.zip \
    && CHROMEDRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION}/linux64/chromedriver-linux64.zip" \
    && curl -fSL -o /tmp/chromedriver.zip "$CHROMEDRIVER_URL" \
    && unzip -o /tmp/chromedriver.zip -d /tmp/ \
    && mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver \
    && rm -rf /tmp/chromedriver.zip

# --- CREATE USER AND DIRECTORIES ---
RUN useradd -m -s /bin/bash runner \
    && usermod -aG sudo runner \
    && echo "runner ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers \
    && mkdir -p /home/runner/workspace /actions-runner \
    && chown -R runner:runner /home/runner /actions-runner

# --- INSTALL NODE.JS ---
RUN curl -fsSL "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.xz" -o /tmp/node.tar.xz \
    && tar -xJf /tmp/node.tar.xz -C /usr/local --strip-components=1 --no-same-owner \
    && rm -rf /tmp/node.tar.xz 

# --- INSTALL GO ---
RUN GO_VERSION="1.23.1" \
    && curl -fsSL "https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz" -o /tmp/go.tar.gz \
    && tar -C /usr/local -xzf /tmp/go.tar.gz \
    && rm /tmp/go.tar.gz \
    && ln -sf /usr/local/go/bin/go /usr/local/bin/go \
    && ln -sf /usr/local/go/bin/gofmt /usr/local/bin/gofmt \
    && ln -sf /usr/local/go/bin/godoc /usr/local/bin/godoc

# --- INSTALL PYTHON PACKAGES ---
USER runner
WORKDIR /home/runner
RUN python3 -m venv /home/runner/venv \
    && /home/runner/venv/bin/pip install --upgrade pip \
    && /home/runner/venv/bin/pip install --no-cache-dir selenium pytest pytest-selenium webdriver-manager
ENV PATH="/home/runner/venv/bin:$PATH"

# --- INSTALL, NPM, PLAYWRIGHT, CYPRESS ---
RUN npm config set prefix /home/runner/.npm \
    && npm config set cache /home/runner/.npm-cache \
    && npm install -g \
    npm@11.6.0 \
    playwright@1.49.1 \
    @playwright/test@1.49.1 \
    cypress@13.15.0 \
    && rm -rf /home/runner/.cache/Cypress \
    && npm install playwright@1.49.1 \
    && npx playwright install chromium firefox --only-shell

# --- INSTALL GITHUB ACTIONS RUNNER ---
ARG RUNNER_VERSION
WORKDIR /actions-runner
RUN curl -o "actions-runner.tar.gz" -L "https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-x64-${RUNNER_VERSION}.tar.gz" \
    && tar xzf "./actions-runner.tar.gz" \
    && rm "./actions-runner.tar.gz"
WORKDIR /home/runner

# --- VERIFICATION, HEALTHCHECK AND ENTRYPOINT ---
COPY --chown=runner:runner entrypoint-chrome.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD pgrep -f "Runner.Listener" > /dev/null || exit 1

ENTRYPOINT ["/entrypoint.sh"]
